// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	shared_models "service-shared/shared-models"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateApplication provides a mock function with given fields: firstName, lastName
func (_m *Repository) CreateApplication(firstName string, lastName string) (string, error) {
	ret := _m.Called(firstName, lastName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(firstName, lastName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(firstName, lastName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplication provides a mock function with given fields: applicationID
func (_m *Repository) GetApplication(applicationID string) (*shared_models.ApplicationEntry, error) {
	ret := _m.Called(applicationID)

	var r0 *shared_models.ApplicationEntry
	if rf, ok := ret.Get(0).(func(string) *shared_models.ApplicationEntry); ok {
		r0 = rf(applicationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared_models.ApplicationEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(applicationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationsWithStatus provides a mock function with given fields: status
func (_m *Repository) GetApplicationsWithStatus(status shared_models.Status) ([]shared_models.ApplicationEntry, error) {
	ret := _m.Called(status)

	var r0 []shared_models.ApplicationEntry
	if rf, ok := ret.Get(0).(func(shared_models.Status) []shared_models.ApplicationEntry); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shared_models.ApplicationEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(shared_models.Status) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveApplication provides a mock function with given fields: applicationID
func (_m *Repository) RemoveApplication(applicationID string) error {
	ret := _m.Called(applicationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(applicationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateApplicationStatus provides a mock function with given fields: applicationID, status
func (_m *Repository) UpdateApplicationStatus(applicationID string, status shared_models.Status) error {
	ret := _m.Called(applicationID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, shared_models.Status) error); ok {
		r0 = rf(applicationID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
