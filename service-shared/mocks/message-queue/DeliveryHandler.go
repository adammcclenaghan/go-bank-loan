// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	amqp091 "github.com/rabbitmq/amqp091-go"

	mock "github.com/stretchr/testify/mock"
)

// DeliveryHandler is an autogenerated mock type for the DeliveryHandler type
type DeliveryHandler struct {
	mock.Mock
}

// Ack provides a mock function with given fields: multiple, delivery
func (_m *DeliveryHandler) Ack(multiple bool, delivery amqp091.Delivery) error {
	ret := _m.Called(multiple, delivery)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, amqp091.Delivery) error); ok {
		r0 = rf(multiple, delivery)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Nack provides a mock function with given fields: multiple, requeue, delivery
func (_m *DeliveryHandler) Nack(multiple bool, requeue bool, delivery amqp091.Delivery) error {
	ret := _m.Called(multiple, requeue, delivery)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, bool, amqp091.Delivery) error); ok {
		r0 = rf(multiple, requeue, delivery)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reject provides a mock function with given fields: requeue, delivery
func (_m *DeliveryHandler) Reject(requeue bool, delivery amqp091.Delivery) error {
	ret := _m.Called(requeue, delivery)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, amqp091.Delivery) error); ok {
		r0 = rf(requeue, delivery)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDeliveryHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeliveryHandler creates a new instance of DeliveryHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeliveryHandler(t mockConstructorTestingTNewDeliveryHandler) *DeliveryHandler {
	mock := &DeliveryHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
